#!/usr/bin/perl

use strict;
use warnings;

BEGIN
{
    if ( !@ARGV or $ARGV[0] ne 'compile' )
    {
        print <<'EOF';
To run do:
export FCS_BIN_PATH="`pwd`" FCS_SRC_PATH="`pwd`/../source"
export FCS_PATH="${FCS_BIN_PATH}"
perl ../scripts/cmd-line-compiler compile
EOF
    }
    my $FCS_BIN_PATH = $ENV{FCS_BIN_PATH};
    if (   ( !defined $FCS_BIN_PATH )
        or ( $FCS_BIN_PATH !~ /\S/ )
        or ( not -d $FCS_BIN_PATH ) )
    {
        print <<'EOF';
To run do:
export FCS_BIN_PATH="`pwd`" FCS_SRC_PATH="`pwd`/../source"
export FCS_PATH="${FCS_BIN_PATH}"
perl ../scripts/cmd-line-compiler compile
EOF

    }
}

use Path::Tiny qw/ path /;
use lib "$ENV{FCS_SRC_PATH}/t/lib";
use FC_Solve::CmdLine::Expand ();

sub compile_cmd_line
{
    my $args       = shift;
    my $input_argv = $args->{argv};

    my $obj = FC_Solve::CmdLine::Expand->new(
        {
            input_argv => $input_argv,
        }
    );

    my $expanded = [ @{ $obj->argv() } ];
    my $out      = <<'EOF';
#pragma once
#define freecell_solver_user_set_soft_thread_name(st, n)
static inline void my_init_instance(void *const instance)
{
    FCS__DECL_ERR_PTR(fcs_user_errstr);
EOF

    my %names;
    my $soft_thread_idx = 0;
    my %one_param       = (
        '-dto' => {
            f => 'freecell_solver_user_set_depth_tests_order',
            p => sub {
                my $p = shift;
                my ( $complete, $d, $to ) = $p =~ /\A(([0-9]+),(.*))\z/ms;
                return qq#$d, "$complete" FCS__PASS_ERR_STR(&fcs_user_errstr)#;
            },
        },
        '-dto2' => {
            f => 'freecell_solver_user_set_depth_tests_order',
            p => sub {
                my $p = shift;
                my ( $complete, $d, $to ) = $p =~ /\A(([0-9]+),(.*))\z/ms;
                return qq#$d, "$to" FCS__PASS_ERR_STR(&fcs_user_errstr)#;
            },
        },
        '--method' => {
            f => 'freecell_solver_user_set_solving_method',
            p => sub {
                return {
                    'random-dfs' => 'FCS_METHOD_RANDOM_DFS',
                    'a-star'     => 'FCS_METHOD_A_STAR',
                }->{ shift(@_) };
            },
        },
        '-seed' => {
            f => 'freecell_solver_user_set_random_seed',
            p => sub { return shift; },
        },
        '-sp' => {
            f => 'freecell_solver_user_set_pruning',
            p => sub {
                my $arg = shift;
                if ( $arg eq "r:tf" )
                {
                    $arg = "r:tf,r:oc";
                }
                else
                {
                    die "wrong arg=$arg;";
                }
                return qq#"# . $arg . qq#" FCS__PASS_ERR_STR(&fcs_user_errstr)#;
            },
        },
        '-step' => {
            f => 'freecell_solver_user_set_soft_thread_step',
            p => sub { return shift; },
        },
        '--st-name' => {
            f => 'freecell_solver_user_set_soft_thread_name',
            p => sub {
                my $name = shift;
                $names{$name} = $soft_thread_idx;
                return qq#"$name"#;
            },
        },
        '-to' => {
            f => 'freecell_solver_user_set_depth_tests_order',
            p => sub {
                return qq#0, "# . shift
                    . qq#" FCS__PASS_ERR_STR(&fcs_user_errstr)#;
            },
        },
    );

    for ( my $i = 0 ; $i < @$expanded ; ++$i )
    {
        my $s = $expanded->[$i];
        if ( my $rec = $one_param{$s} )
        {
            my $param = $expanded->[ ++$i ];
            $out .= "$rec->{f}(instance," . $rec->{p}->($param) . ");\n";
        }
        elsif ( $s eq '-mi' )
        {
            my $param = int( $expanded->[ ++$i ] );
            my $f     = 'freecell_solver_user_limit_iterations_long';
            $out .= <<"EOF";
#ifndef FCS_WITHOUT_MAX_NUM_STATES
freecell_solver_user_limit_iterations_long(instance, ${param}L);
#endif
EOF
        }
        elsif ( $s eq '--prelude' )
        {
            my $param = $expanded->[ ++$i ];
            my $f     = 'fc_solve_user_set_ht_compiled_prelude';
            my @pre   = map { [ split /\@/, $_ ] } split /,/, $param;
            $out .= <<"EOF";
{
    #define PRELUDE_LEN @{[scalar @pre]}
    static const fc_solve_prelude_item prelude[PRELUDE_LEN] = {@{[join ",", map { "{.quota = $_->[0], .scan_idx = " . $names{$_->[1]} . '}' } @pre]}};
    $f(instance, PRELUDE_LEN, prelude);
    #undef PRELUDE_LEN
}
EOF
        }
        elsif ( $s eq '-nst' )
        {
            ++$soft_thread_idx;
            $out .= qq#freecell_solver_user_next_soft_thread(instance);\n#;
        }
        elsif ( $s eq '-asw' )
        {
            my $param = $expanded->[ ++$i ];
            my @vals  = split /,/, $param;
            while ( my ( $pos, $v ) = each @vals )
            {
                $out .=
qq#freecell_solver_user_set_a_star_weight(instance, $pos, $v);\n#;
            }
        }
        else
        {
            die "Unrecognised command line argument <$s>!";
        }
    }

    $out .= "}\n";
    path( $args->{out_fn} )->spew_utf8($out);

    return;
}

# TEST
compile_cmd_line(
    {
        # argv   => [ '-l', 'obf', ],
        argv => [
            '--read-from-file',
            "4,$ENV{FCS_SRC_PATH}/../scripts/TEST_OPTIMIZATIONS/lg-mod1.sh",
            @ARGV[ 1 .. $#ARGV ],
        ],
        name   => 'obf',
        out_fn => 'fc_solve__precompiled__theme.h',
    },
);

__END__

=head1 COPYRIGHT AND LICENSE

This file is part of Freecell Solver. It is subject to the license terms in
the COPYING.txt file found in the top-level directory of this distribution
and at http://fc-solve.shlomifish.org/docs/distro/COPYING.html . No part of
Freecell Solver, including this file, may be copied, modified, propagated,
or distributed except according to the terms contained in the COPYING file.

Copyright (c) 2009 Shlomi Fish

=cut
