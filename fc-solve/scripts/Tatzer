#!/usr/bin/env perl

# This is a script to configure the distribution. Its primary audience
# are the core developers and halo developers, and not end-users. Please
# see the INSTALL file for proper building instructions using cmake.
#
# "Tatzer" (Taf-Tzadik-Reish) is the Hebrew word for "configure!".

use 5.014;
use strict;
use warnings;
use autodie;

use Getopt::Long qw/ GetOptions /;
use Path::Tiny   qw/ cwd path /;

my $HOME = $ENV{HOME} // $ENV{userprofile} // "";

my %BOOL_OPTS_WITH_FALSE_DEFAULTS = (
    'avoid-tcmalloc'            => 'FCS_AVOID_TCMALLOC',
    'break-back-compat-1'       => 'FCS_BREAK_BACKWARD_COMPAT_1',
    'break-back-compat-2'       => 'FCS_BREAK_BACKWARD_COMPAT_2',
    'dbm-single-thread'         => 'FCS_DBM_SINGLE_THREAD',
    'disable-check-valid'       => 'FCS_DISABLE_STATE_VALIDITY_CHECK',
    'disable-err-strs'          => 'FCS_DISABLE_ERROR_STRINGS',
    'disable-flares'            => 'FCS_DISABLE_MULTI_FLARES',
    'disable-moves-track'       => 'FCS_DISABLE_MOVES_TRACKING',
    'disable-ni'                => 'FCS_DISABLE_MULTI_NEXT_INSTS',
    'disable-num-stored-states' => 'FCS_DISABLE_NUM_STORED_STATES',
    'disable-resume'            => 'FCS_WITHOUT_EXPORTED_RESUME_SOLUTION',
    'disable-patsolve'          => 'FCS_DISABLE_PATSOLVE',
    'disable-simple-simon'      => 'FCS_DISABLE_SIMPLE_SIMON',
    'fc-only'                   => 'FCS_FREECELL_ONLY',
    'hard-code-calc-real-depth' => 'FCS_HARD_CODE_CALC_REAL_DEPTH_AS_FALSE',
    'hard-code-depth-field'     => 'FCS_HARD_CODE_STATE_DEPTH_FIELD',
    'hard-code-reparent-states' => 'FCS_HARD_CODE_REPARENT_STATES_AS_FALSE',
    'hard-code-scans-synergy'   => 'FCS_HARD_CODE_SCANS_SYNERGY_AS_TRUE',
    'hard-code-sp-rtf'          => 'FCS_ENABLE_PRUNE__R_TF__UNCOND',
    'hard-code-theme'           => 'FCS_USE_PRECOMPILED_CMD_LINE_THEME',
    'omit-frame'                => 'OPTIMIZATION_OMIT_FRAME_POINTER',
    'print-solved'              => 'FCS_RANGE_SOLVERS_PRINT_SOLVED',
    'rcs'                       => 'FCS_ENABLE_RCS_STATES',
    'single-ht'                 => 'FCS_SINGLE_HARD_THREAD',
    'static'                    => 'FCS_LINK_TO_STATIC',
    'tracemem'                  => 'FCS_TRACE_MEM',
    'unsafe'                    => 'FCS_UNSAFE',
    'with-compact-moves'        => 'FCS_USE_COMPACT_MOVE_TOKENS',
    'without-depth-field'       => 'FCS_WITHOUT_DEPTH_FIELD',
    'without-fc-pro'            => 'FCS_WITHOUT_FC_PRO_MOVES_COUNT',
    'without-help'              => 'FCS_WITHOUT_CMD_LINE_HELP',
    'without-max-num-states'    => 'FCS_WITHOUT_MAX_NUM_STATES',
    'without-iter-handler'      => 'FCS_WITHOUT_ITER_HANDLER',
    'without-trim'              => 'FCS_WITHOUT_TRIM_MAX_STORED_STATES',
    'without-visited-iter'      => 'FCS_WITHOUT_VISITED_ITER',
    'zero-freecells-mode'       => 'FCS_ZERO_FREECELLS_MODE',
);

my %TRUE_BOOL_OPTS = (
    'build-docs'   => 'FCS_BUILD_DOCS',
    'test-suite'   => 'FCS_WITH_TEST_SUITE',
    'with-ctx-var' => 'FCS_WITH_CONTEXT_VARIABLE',
);

my %INT_OPTS = (
    'enable-inc-solving'    => 'FCS_CMD_LINE_ENABLE_INCREMENTAL_SOLVING',
    'max-bench-threads-num' => 'MAX_NUM_BENCHMARK_THREADS',
    'max-num-init-cards'    => 'MAX_NUM_INITIAL_CARDS_IN_A_STACK',
    'max-rank'              => 'FCS_MAX_RANK',
    'nfc'                   => 'FCS_HARD_CODED_NUM_FCS_FOR_FREECELL_ONLY',
    'num-stacks'            => 'MAX_NUM_STACKS',
    'pack-size'             => 'FCS_IA_PACK_SIZE',
    'scan-buckets-num'      => 'FCS_MAX_NUM_SCANS_BUCKETS',
);

my %STR_OPTS = (
    'arch'        => { param => 'CPU_ARCH', },
    'dbm'         => { param => 'FCS_DBM_BACKEND', },
    'dbmtree'     => { param => 'FCS_DBM_TREE_BACKEND', },
    'libavl2-c'   => { param => 'FCS_STACK_STORAGE_LIBAVL2_TREE_TYPE' },
    'libavl2-p'   => { param => 'FCS_STATE_STORAGE_LIBAVL2_TREE_TYPE' },
    'prefix'      => { param => 'CMAKE_INSTALL_PREFIX', },
    'states-type' => { param => 'STATES_TYPE', },
    (
        map {
            my ( $key, $param ) = @$_;
            ( $key => +{ prefix => "${param}_", param => $param } )
        } (
            [ 'c|cols'            => 'FCS_STACK_STORAGE' ],
            [ 'p|pos'             => 'FCS_STATE_STORAGE' ],
            [ 'rcs-cache-storage' => 'FCS_RCS_CACHE_STORAGE' ],
        )
    ),
);

my @BOOL_OPTS_WITH_FALSE_DEFAULTS__KEYS = keys %BOOL_OPTS_WITH_FALSE_DEFAULTS;

my %bool_opts_with_false_defaults__values =
    ( map { $_ => 0 } @BOOL_OPTS_WITH_FALSE_DEFAULTS__KEYS );

my @TRUE_BOOL_KEYS         = keys %TRUE_BOOL_OPTS;
my %true_bool_opts__values = map { $_ => 1 } @TRUE_BOOL_KEYS;

my @INT_OPS__KEYS = keys %INT_OPTS;

my %int_opts__values = ( map { $_ => undef() } @INT_OPS__KEYS );

my @STR_OPTS__KEYS = keys %STR_OPTS;
for my $k (@STR_OPTS__KEYS)
{
    $STR_OPTS{$k}{'value'} = undef();
    $STR_OPTS{$k}{'prefix'} //= '';
}

$int_opts__values{'enable-inc-solving'}    = 1;
$int_opts__values{'max-bench-threads-num'} = 4;
$STR_OPTS{'prefix'}{value}                 = '/usr';
$STR_OPTS{'rcs-cache-storage'}{value}      = 'KAZ_TREE';

my $build_type = "debug";
my $generate_what;
my $google_stack_storage;
my $google_state_storage;
my $cmdl_compile;

sub set_both
{
    my $val = shift;
    foreach my $k ( 'c|cols', 'p|pos' )
    {
        $STR_OPTS{$k}{'value'} = $val;
    }
    return;
}

sub set_hash
{
    return set_both("INTERNAL_HASH");
}

set_hash();

sub _google_set_both
{
    my $val = shift;

    $google_state_storage = $google_stack_storage = $val;

    return;
}
_google_set_both("SPARSE");

sub _set_to_google_hash
{
    set_both("GOOGLE_DENSE_HASH");
    _google_set_both(shift);
    return;
}

my %themes = (
    'empty'               => [],
    'citest-speed-noiter' => [qw(-l citest-extra-speed --without-iter-handler)],
    'citest-max-speed'    => [qw(-l citest-extra-speed --disable-err-strs)],
    'citest-extra-speed'  => [qw(-l citest-arch-b -l extra_speed)],
    'citest-arch-b'       =>
        [qw(-l preferred-arch-b --states-type=INDIRECT_STACK_STATES)],
    'citest-arch-t' =>
        [qw(-l preferred-arch-t --states-type=INDIRECT_STACK_STATES)],
    'citest-bbc'              => [qw(-l citest-arch-t --break-back-compat-1)],
    'citest-disable-patsolve' => [qw(-l citest-arch-t --disable-patsolve)],
    'citest-nosingle-ht'      => [qw(-l citest-arch-t --nosingle-ht)],
    'citest-apr_hash'         => [qw(-l citest-arch-t --dbmtree=apr_hash)],
    'citest-fc-nocompat'      =>
        [qw(-l citest-arch-t --break-back-compat-1 --fc-only)],
    'citest-compact-t'                 => [qw(-l preferred-arch-t)],
    'citest-avl-INDIRECT_STACK_STATES' =>
        [qw(-l citest-arch-t --libavl2-p=prb)],
    'citest-avl-COMPACT_STATES' => [qw(-l citest-compact-t --libavl2-p=prb)],
    'citest-avl-COMPACT_STATES-rcs' => [qw(-l citest-avl-COMPACT_STATES --rcs)],
    tt                              => [qw(-r --notest-suite --static)],
    bench                           => [
        qw(-l tt --omit-frame --without-visited-iter --single-ht --break-back-compat-1 --enable-inc-solving=0)
    ],
    fc_bench => [
        qw( -l bench --fc-only --without-fc-pro --nobuild-docs --states-type=COMPACT_STATES --max-num-init-cards=7 )
    ],
    mem_reduction_settings => [
        qw(
            --rcs --with-compact-moves --without-depth-field
        )
    ],
    reduce_mem    => [qw(-l bench -l mem_reduction_settings)],
    fc_reduce_mem =>
        [qw(-l fc_bench -l mem_reduction_settings --scan-buckets-num=2)],
    testing     => [ qw(--rwd --dbm=kaztree --test-suite --num-stacks=13), ],
    extra_speed => [
        qw(--break-back-compat-1 --without-fc-pro --without-trim --disable-flares --disable-moves-track --disable-check-valid --disable-patsolve --disable-resume --hard-code-reparent-states  --hard-code-calc-real-depth --disable-err-strs --disable-num-stored-states --without-help),
    ],
    extra_speed2 => [
        qw(-l n2b),
        qw(-l extra_speed --hard-code-theme --disable-ni --without-help --without-iter-handler --unsafe --break-back-compat-2 --hard-code-depth-field),
    ],
    extra_speed3 =>
        [qw(-l extra_speed2 --no-without-max-num-states --nohard-code-theme)],
    ten_mil_bench =>
        [qw(-l extra_speed2 --no-without-max-num-states --cmdline-compile)],

    verify_bench => [
        qw(-l extra_speed3 --no-disable-ni --no-without-max-num-states --nohard-code-theme --no-disable-moves-track --no-disable-err-strs)
    ],

    # Role for enabling the pseudo-DFS solver
    pdfs       => [qw(--judy --states-type=COMPACT_STATES --dbm=kaztree)],
    pysol_defs => [ '--num-stacks=14', '--nobreak-back-compat-1', ],
    zerofc     => [qw(-l extra_speed3 --nfc=0 --print-solved --dbm=kaztree)],
    zerofcm    => [qw(-l zerofc -l fc_reduce_mem)],
    zerofcst   => [qw(-l zerofc --dbm-single-thread --dbmtree=apr_hash)],
    zerofcmode => [
        qw(-l zerofcst --zero-freecells-mode),
        "--prefix=$HOME/apps/fcs-zero-freecells-production",
    ],
    zerofcmode_with_moves => [
        qw(-l zerofcmode --no-disable-moves-track --no-disable-num-stored-states),
        "--prefix=$HOME/apps/fcs-zero-freecells-debug",
    ],
);

my $SEED_KEY = 'FCS_THEME_RAND';
my $SEED     = $ENV{$SEED_KEY};
if ( $ENV{FCS_THEME_RAND_TELL_FLAGS_COUNT} )
{
    $SEED = 1;
}
if ( defined $SEED )
{
    if ( $SEED =~ /[^0-9]/ )
    {
        die "Invalid value for seed!";
    }
    my %k;
    foreach my $flags ( values %themes )
    {
        for ( my $idx = 0 ; $idx < @$flags ; ++$idx )
        {
            my $flag = $flags->[$idx];
            if ( $flag eq '-l' )
            {
                ++$idx;
            }
            else
            {
                $flag =~ s/\A--no-?/--/;
                $k{$flag} = 1;
            }
        }
    }

    sub _map_flag
    {
        my $flag = shift;
        if ( my ($key) = $flag =~ /\A--(.*)/ms )
        {
            if ( exists $TRUE_BOOL_OPTS{$key} ) { return "--no-$key"; }
        }
        return $flag;
    }
    my @k = sort { $a cmp $b } map { _map_flag($_) }
        keys %k;

    if ( $ENV{FCS_THEME_RAND_TELL_FLAGS_COUNT} )
    {
        my $output = scalar(@k);
        print "$output\n";
        exit(0);
    }
    require Math::Random::MT;
    my $gen     = Math::Random::MT->new($SEED);
    my $shuffle = sub {
        my ($deck) = @_;

        if (@$deck)
        {
            my $i = @$deck;
            while ( --$i )
            {
                my $j = int $gen->rand( $i + 1 );
                @$deck[ $i, $j ] = @$deck[ $j, $i ];
            }
        }

        return $deck;
    };
    my $COUNT = $ENV{FCS_THEME_RAND_COUNT};
    my @subset;
    if (0)
    {
        foreach my $key (@k)
        {
            if ( $gen->rand() < 0.5 )
            {
                push @subset, $key;
            }
        }
    }
    elsif ( $ENV{FCS_THEME_RAND_BY_ORDER} )
    {
        my $_count = 0;

        my $iter;

        $iter = sub {
            my ( $stack, $bitmask ) = @_;
            if ( @$stack == $COUNT )
            {
                if ( $_count == $SEED )
                {
                    @subset = @k[@$stack];
                    return 1;
                }
                else
                {
                    die if $_count > $SEED;
                    ++$_count;
                    return 0;
                }
            }
            else
            {
                foreach my $next ( keys(@k) )
                {
                    if ( not vec( $bitmask, $next, 1 ) )
                    {
                        my $new_bitmask = $bitmask;
                        vec( $new_bitmask, $next, 1 ) = 1;
                        if ( $iter->( [ @$stack, $next ], $new_bitmask ) )
                        {
                            return 1;
                        }
                    }
                }
                return 0;
            }
        };

        $iter->( [], "" );
    }
    else
    {
        $shuffle->( \@k );
        @subset = @k[ 0 .. $COUNT - 1 ];
    }
    my $FN = "run-t-$SEED-$COUNT.bash";
    @subset = grep { not /libavl/i } @subset;
    path($FN)->spew_utf8( "$^X $0", ( @subset ? " @subset" : "" ) . "\n" );
    delete $ENV{$SEED_KEY};
    exec( "bash", $FN );
}

my $ARCH = $ENV{FC_SOLVE__MULT_CONFIG_TESTS__GCC_ARCH} // 'n2';
foreach my $rec (
    {
        id => "c2",
        a  => "core2",
    },
    {
        id => "ci7",
        a  => "corei7-avx",
    },
    {
        id => "n2",
        a  => "native",
    },
    {
        id => "p4",
        a  => "pentium4"
    },
    {
        id => "x64",
        a  => "x86-64"
    },
    {
        id => "preferred-arch-",
        a  => [$ARCH],
    },
    )
{
    my $id      = $rec->{id};
    my $arch    = $rec->{a};
    my $is_pref = ( ref($arch) eq 'ARRAY' );

    if ( not $is_pref )
    {
        $themes{$id} = [ "--arch=$arch", "--prefix=$HOME/apps/fcs", ];
    }

    my $def = sub {
        my ( $suffix, $theme ) = @_;
        $themes{ $id . $suffix } = [@$theme];
        return;
    };
    my $id_def = sub {
        my ( $suffix, $theme ) = @_;
        return $def->( $suffix, [ '-l', $theme, '-l', $id ] );
    };
    my $bb_def = sub {
        my ( $suffix, $theme ) = @_;
        return $def->( $suffix, [ '-l', $id . 'bb', @$theme ] );
    };
    if ($is_pref)
    {
        $bb_def = $id_def = sub {
            my ( $suffix, $theme ) = @_;
            return $def->( $suffix, [ '-l', $arch->[0] . $suffix ] );
        };
    }

    # Benchmark for freecell only
    $id_def->( b => 'fc_bench' );

    # Generalised benchmark - not freecell-only - should pass the tests.
    $id_def->( bb => 'bench' );

    # Memory conserving theme - for freecell only
    $id_def->( m => 'fc_reduce_mem' );

    # Generalised Memory conserving theme - not only for freecell
    $id_def->( mm => 'reduce_mem' );

    # Testing theme - aims to run the tests quickly
    $bb_def->( t => [qw(-l testing)] );

    # For use by PySolFC
    $bb_def->(
        _pysol => [ '-l', 'pysol_defs', "--prefix=$HOME/apps/fcs-for-pysol", ]
    );
}

my @new_argv = @ARGV;

CALC_NEW_ARGV:
for ( my $idx = 0 ; $idx < @new_argv ; ++$idx )
{
    if ( my ($arg_val) = $new_argv[$idx] =~ m{\A-l(.*)\z}ms )
    {
        my $start_idx = $idx;

        my $param = $arg_val || $new_argv[ ++$idx ];

        if ( !( my $cmd = $themes{$param} ) )
        {
            die "Unknown -l argument $param!";
        }
        else
        {
            splice( @new_argv, $start_idx, $idx - $start_idx + 1, @$cmd );
        }

        $idx = $start_idx;
        redo CALC_NEW_ARGV;
    }
}

@ARGV = @new_argv;

if ( $ENV{VERBOSE} )
{
    print "<@ARGV>";
}

my %cmake_defines;

GetOptions(
    'cmakedefine=s'    => \%cmake_defines,
    'cmdline-compile!' => \$cmdl_compile,
    'd|debug'          => sub {
        my ( $opt, $val ) = @_;
        if ($val)
        {
            $build_type = "debug";
        }
        return;
    },
    'r|release' => sub {
        my ( $opt, $val ) = @_;
        if ($val)
        {
            $build_type = "release";
        }
        elsif ( $build_type eq "release" )
        {
            $build_type = "debug";
        }
        return;
    },
    'hash'    => \&set_hash,
    'profile' => sub {
        my ( $opt, $val ) = @_;
        if ($val)
        {
            $build_type = "profile";
        }
        elsif ( $build_type eq "profile" )
        {
            $build_type = "debug";
        }
        return;
    },
    'minsize' => sub {
        $build_type = "MinSizeRel";
        return;
    },
    'gen=s' => \$generate_what,
    'rwd'   => sub {
        my ( $opt, $val ) = @_;

        $build_type = "RelWithDebInfo";

        return;
    },
    'kazlib' => sub {
        $STR_OPTS{'p|pos'}{value} = $STR_OPTS{'rcs-cache-storage'}{value} =
            'KAZ_TREE';
    },
    'judy'            => sub { return set_both("JUDY"); },
    'lrb|libredblack' => sub { return set_both("LIBREDBLACK_TREE"); },
    'dense'           => sub { return _set_to_google_hash("DENSE"); },
    'sparse'          => sub { return _set_to_google_hash("SPARSE"); },
    (
        map { ; "$_!" => \( $bool_opts_with_false_defaults__values{$_} ) }
            @BOOL_OPTS_WITH_FALSE_DEFAULTS__KEYS
    ),
    ( map { ; "$_!"  => \( $true_bool_opts__values{$_} ) } @TRUE_BOOL_KEYS ),
    ( map { ; "$_=i" => \( $int_opts__values{$_} ) } @INT_OPS__KEYS ),
    ( map { ; "$_=s" => \( $STR_OPTS{$_}{value} ) } @STR_OPTS__KEYS ),
) or die "Wrong options";

my $path_to_source_dir;

if (@ARGV)
{
    $path_to_source_dir = path( shift(@ARGV) );

    if (@ARGV)
    {
        die "Junk at the end of ARGV - <@ARGV>";
    }
}
else
{
    $path_to_source_dir = path($0)->parent(2)->child('source');
}

if ( $bool_opts_with_false_defaults__values{rcs} )
{
    $STR_OPTS{'states-type'}{'value'} = 'COMPACT_STATES';
}

if ( $STR_OPTS{'libavl2-p'}{value} )
{
    $STR_OPTS{'p|pos'}{value} = 'LIBAVL2_TREE';
}

if ( $STR_OPTS{'libavl2-c'}{value} )
{
    $STR_OPTS{'c|cols'}{value} = 'LIBAVL2_TREE';
}

# if ( $build_type eq "debug" )
if (1)
{
    $STR_OPTS{dbm}{value} //= 'kaztree';
}

# This cache is sometimes causing problems.
eval { unlink("CMakeCache.txt"); };
eval {
    foreach my $p ( '_Inline', 't/_Inline' )
    {
        path($p)->remove_tree;
    }
};
eval { unlink( glob("*.so") ); };

$STR_OPTS{dbm}{value} //= '';

my @cmd = (
    "cmake",
    (
        map {
            my $k = $_;
            my $v = $cmake_defines{$k};
            "-D$k=$v";
        } sort { $a cmp $b } keys(%cmake_defines)
    ),
    (
        defined( $ENV{CMAKE_MAKE_PROGRAM} )
        ? "-DCMAKE_MAKE_PROGRAM=$ENV{CMAKE_MAKE_PROGRAM}"
        : ()
    ),
    (
        defined( $ENV{CMAKE_PREFIX_PATH} )
        ? "-DCMAKE_PREFIX_PATH=$ENV{CMAKE_PREFIX_PATH}"
        : ()
    ),
    ( defined($generate_what) ? ( "-G", $generate_what ) : () ),
    "-DCMAKE_BUILD_TYPE=$build_type",
    "-DDATADIR=$STR_OPTS{prefix}{value}/share",
    "-DBUILD_STATIC_LIBRARY=",
"-DFCS_WHICH_COLUMNS_GOOGLE_HASH=FCS_WHICH_COLUMNS_GOOGLE_HASH__$google_stack_storage",
"-DFCS_WHICH_STATES_GOOGLE_HASH=FCS_WHICH_STATES_GOOGLE_HASH__$google_state_storage",

    # Specifying a -D variable explicitly if it's not used gives a warning,
    # so we need to check that it is used.
    (
        (
            ( $STR_OPTS{'libavl2-c'}{value} || $STR_OPTS{'libavl2-p'}{value} )
                && exists( $ENV{"LIBAVL2_SOURCE_DIR"} )
        ) ? ("-DLIBAVL2_SOURCE_DIR=$ENV{LIBAVL2_SOURCE_DIR}")
        : ()
    ),
    (
          ( $STR_OPTS{dbm}{value} eq 'none' ) ? ("-DFCS_ENABLE_DBM_SOLVER=0")
        : $STR_OPTS{dbm}{value}               ? ("-DFCS_ENABLE_DBM_SOLVER=1")
        :                                       ()
    ),
    (
        defined( $int_opts__values{nfc} )
        ? ("-DFCS_DBM_FREECELLS_NUM=$int_opts__values{nfc}")
        : ()
    ),
    (
        map {
            $bool_opts_with_false_defaults__values{$_}
                ? ( "-D" . $BOOL_OPTS_WITH_FALSE_DEFAULTS{$_} . "=1" )
                : ()
        } @BOOL_OPTS_WITH_FALSE_DEFAULTS__KEYS
    ),
    (
        map {
                  '-D'
                . $TRUE_BOOL_OPTS{$_} . '='
                . ( $true_bool_opts__values{$_} ? '1' : '' )
        } @TRUE_BOOL_KEYS
    ),
    (
        map {
            defined( $int_opts__values{$_} )
                ? ( "-D" . $INT_OPTS{$_} . "=" . $int_opts__values{$_} )
                : ()
        } @INT_OPS__KEYS
    ),
    (
        map {
            my $k = $_;
            my $r = $STR_OPTS{$k};
            my $v = $r->{value};
            defined($v) ? ("-D$r->{param}=$r->{prefix}$v") : ()
        } @STR_OPTS__KEYS
    ),
);

push @cmd, $path_to_source_dir;

if ($cmdl_compile)
{
    local $ENV{FCS_BIN_PATH} = cwd()->stringify();
    system( $^X, "../scripts/cmd-line-compiler", "compile", "-mi", "700000" );
}

print( join( " ", @cmd ), "\n" );
my $exit_code = system(@cmd);
exit( $exit_code ? 1 : 0 );

__END__

=head1 COPYRIGHT AND LICENSE

This file is part of Freecell Solver. It is subject to the license terms in
the COPYING.txt file found in the top-level directory of this distribution
and at http://fc-solve.shlomifish.org/docs/distro/COPYING.html . No part of
Freecell Solver, including this file, may be copied, modified, propagated,
or distributed except according to the terms contained in the COPYING file.

Copyright (c) 2000 Shlomi Fish

=cut
